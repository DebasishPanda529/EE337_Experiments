C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/14/2023 14:54:56 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\keyboard.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE keyboard.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -keyboard.lst) TABS(2) OBJECT(.\Objects\keyboard.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"
   3          
   4          code unsigned char pw[]="15A8*D6#";
   5          unsigned char input_pw[]="15A8*D6#"; 
   6          code unsigned char display_msg1[]="Enter Password: ";
   7          code unsigned char display_msg2[]="Correct Password";
   8          code unsigned char display_msg3[]=" Access Granted ";
   9          code unsigned char display_msg4[]=" Wrong Password ";
  10          code unsigned char display_msg5[]=" Access Denied  ";
  11          unsigned char display_msg6[]="                ";        //To append and display the input character
  12          unsigned char input_char='0';                           //To store the input at each iteration?
  13          
  14          unsigned int i=0;
  15          unsigned int a=0;
  16          unsigned int time=5000;
  17          unsigned int debounce=20;
  18          unsigned int col=0;           //To store row number
  19          unsigned int row=0;           //To store column number
  20          unsigned char table[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //To
             - store the lookup table
  21          
  22          unsigned int key_read(void)
  23          {
  24   1        lcd_init();
  25   1        lcd_cmd(0x80);                          
  26   1        P1=0x0F;
  27   1        lcd_write_string(display_msg1);         //Display initial message on the LCD
  28   1        
  29   1        //Column scanning and debouncing algorithm
  30   1        P3_7=0;
  31   1        P3_6=0;
  32   1        P3_5=0;
  33   1        P3_4=0;               //Ground all rows
  34   1        P3=0x0F;              //Read all columns
  35   1        while(P3!=0x0F){
  36   2        P3=0x0F;
  37   2        }
  38   1        P3=0x0F;              //Read all columns
  39   1        while(P3==0x0F){
  40   2        P3=0x0F;
  41   2        }
  42   1        msdelay(debounce);
  43   1        P3=0x0F;              //Read all columns
  44   1        while(P3==0x0F){
  45   2          P3=0x0F;            //Read all columns
  46   2          while(P3!=0x0F){
  47   3          P3=0x0F;
  48   3          }
  49   2          P3=0x0F;            //Read all columns
  50   2          while(P3==0x0F){
  51   3          P3=0x0F;
  52   3          }
  53   2          msdelay(debounce);
C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/14/2023 14:54:56 PAGE 2   

  54   2          P3=0x0F;
  55   2          } 
  56   1        
  57   1        //Assign column value
  58   1        if(P3_3==0)      col=0;
  59   1        else if(P3_2==0) col=1;
  60   1        else if(P3_1==0) col=2;
  61   1        else             col=3;
  62   1        
  63   1        //Row scanning algorithm    
  64   1        P3=0xEF;
  65   1        if(P3!=0xEF) row=0;
  66   1        else{P3=0xDF;
  67   2             if(P3!=0xDF) row=1;
  68   2             else{P3=0xAF;
  69   3                  if(P3!=0xAF) row=2;
  70   3                  else{P3=0x7F;
  71   4                       if(P3!=0x7F) row=3;
  72   4                       else P3=0xEF;
  73   4                      }
  74   3                 }
  75   2            }
  76   1        
  77   1        //Determine the key pressed
  78   1        if(row==0 && col==0)       input_char='1';
  79   1        else if(row==1 && col==0)  input_char='4';
  80   1        else if(row==2 && col==0)  input_char='7';
  81   1        else if(row==3 && col==0)  input_char='*';
  82   1        else if(row==0 && col==1)  input_char='2';
  83   1        else if(row==1 && col==1)  input_char='5';
  84   1        else if(row==2 && col==1)  input_char='8';
  85   1        else if(row==3 && col==1)  input_char='0';
  86   1        else if(row==0 && col==2)  input_char='3';
  87   1        else if(row==1 && col==2)  input_char='6'; 
  88   1        else if(row==2 && col==2)  input_char='9';
  89   1        else if(row==3 && col==2)  input_char='#';
  90   1        else if(row==0 && col==3)  input_char='A';
  91   1        else if(row==1 && col==3)  input_char='B';
  92   1        else if(row==2 && col==3)  input_char='C';
  93   1        else                       input_char='D';
  94   1        
  95   1        //You can also use a 2-D array to assign the keys
  96   1        
  97   1        return input_char;  
  98   1      } 
  99          
 100          void main(){ 
 101   1        
 102   1        lcd_init();
 103   1        
 104   1        for(i=0; i<8; i++){
 105   2          input_pw[i]=key_read();
 106   2          display_msg6[6]=input_pw[i];
 107   2          lcd_cmd(0xC0);
 108   2          lcd_write_string(display_msg6);            //Iterations to take the input
 109   2        }
 110   1        
 111   1        for(i=0; i<8; i++){
 112   2          if(input_pw[i]!=pw[i]) {a=1; break;}
 113   2          else a=0;                   
 114   2        }                                            //Checking for the equality of the strings
 115   1        
C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/14/2023 14:54:56 PAGE 3   

 116   1        if(a==1){
 117   2          lcd_init();
 118   2          lcd_cmd(0x80);
 119   2          lcd_write_string(display_msg4);
 120   2          lcd_cmd(0xC0);
 121   2          lcd_write_string(display_msg5);
 122   2          }                                          //Wrong Password
 123   1        else{
 124   2          lcd_init();
 125   2          lcd_cmd(0x80);
 126   2          lcd_write_string(display_msg2);
 127   2          lcd_cmd(0xC0);
 128   2          lcd_write_string(display_msg3);
 129   2          }                                           //Correct Password
 130   1      
 131   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    869    ----
   CONSTANT SIZE    =     94    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
